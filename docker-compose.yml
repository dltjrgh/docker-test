version: '3.8'

services:

  mysql_db:
    image: mysql:latest
    restart: always
    networks: 
       - app-tier
    volumes:
       - ./mysql/db:/var/lib/mysql
    ports:
      - "3306:3306"
    cap_add:
      - SYS_NICE
    environment:
      - MYSQL_DATABASE=app
      - MYSQL_USER=user
      - MYSQL_PASSWORD=1234
      - MYSQL_ROOT_PASSWORD=1234

  postgres_db:
    image: "postgres"
    restart: always
    networks:
      - app-tier
    volumes:
      - ./postgresql/db:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    cap_add:
      - SYS_NICE
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=1234

  mongo_db:
    image: mongo:latest
    restart: unless-stopped    
    networks: 
       - app-tier
    volumes:
       - ./mongo/db:/data/db
    ports:
      - "27017:27017"

  elastic_search:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch/data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - app-tier

  redis:
    image: "redis:alpine"
    networks: 
       - app-tier
    ports:
      - "6379:6379"

  flask_app:
    build:
      context: .
      dockerfile: ./flask/Dockerfile
    ports:
      - "5000:5000"    
    links:
      - mongo_db:mongo_db     
      - mysql_db:mysql_db             
    depends_on:
      - mysql_db
      - mongo_db
      - redis
    networks:
      - app-tier
    restart: always      
    volumes:
       - ./flask/web:/app

  django_app:
    build:
      context: .
      dockerfile: ./django/Dockerfile
    ports:
      - "8000:8000"
    links:
      - mongo_db:mongo_db
      - mysql_db:mysql_db
    depends_on:
      - mysql_db
      - mongo_db
      - redis
    networks:
      - app-tier
    restart: always
    volumes:
      - ./django/app:/app
    env_file:
      - ./django/env.dev

  java_app:
    build:
      context: .
      dockerfile: ./java/docker-spring-boot/Dockerfile
    ports:
      - "8080:8080"    
    volumes:
       - ./java/docker-spring-boot/target:/opt/app
    links:
      - mongo_db:mongo_db       
    depends_on:
      - mysql_db
      - mongo_db
      - redis
    networks:
      - app-tier
    restart: always        

  nodejs_app:
    build:
      context: .
      dockerfile: ./nodejs/Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./nodejs:/app/src
    links:
      - mongo_db:mongo_db
    depends_on:
      - mongo_db
    networks:
      - app-tier
    restart: always

  notebook:
    image: jupyter/all-spark-notebook
    labels:
      description: Intel Python using Jupyter Notebooks
      name: jupyter notebook
    ports:
      - "8888:8888"
    networks:
      - app-tier
    volumes:
      - ./notebook:/home/notebooks

networks:
  app-tier:
    driver: bridge
